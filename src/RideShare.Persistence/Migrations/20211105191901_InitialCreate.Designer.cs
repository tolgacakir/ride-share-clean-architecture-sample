// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RideShare.Persistence.Context;

namespace RideShare.Persistence.Migrations
{
    [DbContext(typeof(RideShareDbContext))]
    [Migration("20211105191901_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RideShare.Domain.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.TravelDemand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("PlanId");

                    b.ToTable("TravelDemands");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.TravelPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AwaitingDemandCapacity")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<byte>("Capacity")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("My Travel Plan");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("TravelPlans");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.Driver", b =>
                {
                    b.HasOne("RideShare.Domain.Entities.User", "User")
                        .WithOne("Driver")
                        .HasForeignKey("RideShare.Domain.Entities.Driver", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.Passenger", b =>
                {
                    b.HasOne("RideShare.Domain.Entities.User", "User")
                        .WithOne("Passenger")
                        .HasForeignKey("RideShare.Domain.Entities.Passenger", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.TravelDemand", b =>
                {
                    b.HasOne("RideShare.Domain.Entities.Passenger", "Passenger")
                        .WithMany("Demands")
                        .HasForeignKey("PassengerId");

                    b.HasOne("RideShare.Domain.Entities.TravelPlan", "Plan")
                        .WithMany("Demands")
                        .HasForeignKey("PlanId");

                    b.Navigation("Passenger");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.TravelPlan", b =>
                {
                    b.HasOne("RideShare.Domain.Entities.Driver", "Driver")
                        .WithMany("TravelPlans")
                        .HasForeignKey("DriverId");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.Driver", b =>
                {
                    b.Navigation("TravelPlans");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.Passenger", b =>
                {
                    b.Navigation("Demands");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.TravelPlan", b =>
                {
                    b.Navigation("Demands");
                });

            modelBuilder.Entity("RideShare.Domain.Entities.User", b =>
                {
                    b.Navigation("Driver");

                    b.Navigation("Passenger");
                });
#pragma warning restore 612, 618
        }
    }
}
